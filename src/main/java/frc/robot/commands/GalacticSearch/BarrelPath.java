/*----------------------------------------------------------------------------*/
/* Copyright (c) 2019 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot.commands.GalacticSearch;

import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.pathfinder.Pathfinder.Waypoint;
import frc.robot.PurePursuit.PathConfigs;
import frc.robot.commands.Auto.CreatePathCommand;
import frc.robot.subsystems.DriveSubsystem;

// NOTE:  Consider using this command inline, rather than writing a subclass.  For more
// information, see:
// https://docs.wpilib.org/en/latest/docs/software/commandbased/convenience-features.html
public class BarrelPath extends ParallelCommandGroup {
  /**
   * Creates a new pathAuto.
   */

  //Waypoints
  // 0,3.5,90, 0, 0, 8
  // 0,13,70
  // 5,12.6,-90,3,3,0
  // 0,13,95,0,0,8
  // .75,20,100
  // -5,20,-90,2,2,0
  // -.75,19,55,1,1,8
  // 5.5,25,90,2,2,0
  // 1,25,-90,2,2,0
  // 1.5,20,-95,1,1,15
  // -1.5,-3.5,-90
//changed

  // static final Waypoint[] k_loopDrive = { 
  //     new Waypoint(0, 3.5, Math.toRadians(90), 0, 0, 8),
  //     new Waypoint(0, 13, Math.toRadians(70)), 
  //     new Waypoint(5, 12.6, Math.toRadians(-90), 3, 3, 0), 
  //     new Waypoint(0, 13, Math.toRadians(95), 0, 0, 8),
  //     new Waypoint(.75, 20, Math.toRadians(100)), 
  //     new Waypoint(-5, 20, Math.toRadians(-90), 2, 2, 0),
  //     new Waypoint(-.75, 19, Math.toRadians(55), 1, 1, 8),
  //     new Waypoint(5.5, 25, Math.toRadians(90), 2, 2, 0), 
  //     new Waypoint(1, 25, Math.toRadians(-90), 2, 2, 0),
  //     new Waypoint(1.5, 20, Math.toRadians(-95), 1, 1, 15),
  //     new Waypoint(-1.5, -3.5, Math.toRadians(-90))
  //    };

  /*
0,3.5,96.902,4.432,3.167
0,13,70
5,12.6,-90,3,3
0,13,90
0.799,19.615,100
-5.547,20.104,-90,2,2
-0.222,19.083,55,1,1
4.926,24.985,90,2,2
0.577,25.207,-90,0,0
1.243,19.882,-95,1,1
-1.198,2.751,-90
*/
/*
0,3.5,96.902,4.432,3.167,0
0,13,70
5,12.6,-90,3,3,0
0,13,75.612,3.393,2.188
1.287,19.438,100
-4.97,20.192,-90,2,2,0
-0.222,19.083,50.007,1.796,1,0
4.615,24.985,90,2,2,0
0.311,25.296,257.768,2.725,1.465,0
-0.266,19.749,268.27,1,5.547,0
-1.243,3.018,270.454
*/
/*
0,3.5,96.902,4.432,3.167,0
0,13,70
5,12.6,-90,3,3,0
0,13,75.612,3.393,2.188
1.287,19.438,100
-4.97,20.192,-90,2,2,0
-0.222,19.083,50.007,1.796,1,0
4.127,24.852,90,2,2,0
0.444,25.251,271.033,2.441,2.009,0
0.444,19.66,263.67,1.833,1.833,0
-1.243,3.018,267.759
*/
/*
0,3.5,96.902,4.432,3.167,0
0,13,70
5,12.6,-90,3,3,0
0,13,75.612,3.393,2.188
1.376,19.482,112.837,2.745,2.101
-4.97,20.192,-90,2,2,0
-0.222,19.083,46.035,1.726,1,0
3.905,24.763,90,2,2.133,0
0.222,25.251,267.794,2.309,2.291,0
0.71,19.749,278.915,1.833,1.833,0
-1.243,3.018,267.759
*/
/*
0,3.5,96.902,4.432,3.167,0
0,13,70
5,12.6,-90,3,3,0
0,13,75.612,3.393,1.909
0.976,19.749,448.66,2.738,2.101
-4.97,20.192,-90,2,2,0
-0.222,19.083,33.102,1.219,1,0
3.683,24.719,85.673,2.359,2.133,0
0.444,24.985,279.086,2.247,2.291,0
1.42,19.882,278.915,1.833,1.833,0
-1.243,3.018,267.759
*/
/*
0,3.5,96.902,4.432,3.167,0
0.266,12.825,70
5,12.6,-90,3,3,0
0.444,12.914,75.612,3.393,1.909
1.243,19.926,448.66,2.738,2.101
-4.97,20.192,-90,2,2,0
0.0,18.905,33.102,1.219,1,0
3.683,24.719,85.673,2.359,2.133,0
0.444,24.985,279.086,2.247,2.291,0
1.42,19.882,278.915,1.833,9.586,0
-1.243,3.018,270.528
*/
/*
0,3.5,96.902,4.432,3.167,0
0.133,13.225,70
5,12.6,-90,3,3,0
0.089,12.959,75.612,3.393,1.909
1.243,19.926,448.66,2.738,2.101
-4.97,20.192,-90,2,2,0
0.0,18.905,33.102,1.219,1,0
3.683,24.719,85.673,2.359,2.133,0
0.444,24.985,279.086,2.247,2.291,0
1.42,19.882,278.915,1.833,9.586,0
-1.243,2.574,270.528
*/
/*
0,3.5,96.902,4.432,3.167,0
0.133,13.225,70
5,12.6,-90,3,3,0
0.089,12.959,75.612,3.393,1.909
1.243,19.926,448.66,2.738,2.101
-4.97,20.192,-90,2,2,0
0.0,18.905,33.102,1.219,1,0
3.683,24.719,85.673,2.359,2.133,0
0.444,24.985,279.086,2.247,2.291,0
1.42,19.882,278.915,1.833,10.43,0
-1.287,1.331,270.731
*/
/*
0,3.5,96.902,4.432,3.167,0
0.133,13.225,70
5,12.6,-90,3,3,0
0.133,12.959,75.612,3.393,1.909
1.243,19.926,448.66,2.738,2.101
-4.97,20.192,-90,2,2,0
0.0,18.905,33.102,1.219,1,0
3.683,24.719,85.673,2.359,2.133,0
0.444,24.985,279.086,2.247,2.291,0
1.42,19.882,278.915,1.833,11.051,0
-1.154,-0.666,270.459
*/
/*
0,3.5,96.902,4.432,3.167,0
0.133,13.225,70
5,12.6,-90,3,3,0
0.133,12.959,75.612,3.393,1.909
1.243,19.926,448.66,2.738,2.101
-4.97,20.192,-90,2,2,0
0.0,18.905,33.102,1.219,1,0
3.683,24.719,85.673,2.359,2.133,0
0.444,24.985,279.086,2.247,2.291,0
1.42,19.882,278.915,1.833,14.105,0
-1.154,-1.9,270.54
*/
/*
0,3.5,96.902,4.432,3.167,0
0.133,13.225,70
5,12.6,-90,3,3,0
0.133,12.959,75.612,3.393,1.909
1.287,19.66,448.66,2.738,2.101
-4.97,20.192,-90,2,2,0
0.0,18.905,33.102,1.219,1,0
2.973,24.63,85.673,2.359,2.133,0
0.444,24.985,279.086,2.247,2.291,0
1.864,20.059,278.915,1.833,14.105,0
-1.154,-1.9,270.54
*/
static final Waypoint[] k_path = {
  new Waypoint(0, 3.5, Math.toRadians(96.902), 4.432, 3.167, 0),
  new Waypoint(0.133, 13.225, Math.toRadians(70)),
  new Waypoint(5, 12.6, Math.toRadians(-90), 3, 3, 0),
  new Waypoint(0.133, 12.959, Math.toRadians(75.612), 3.393, 1.909,0),
  new Waypoint(1.287, 19.66, Math.toRadians(448.66), 2.738, 2.101,0),
  new Waypoint(-4.97, 20.192, Math.toRadians(-90), 2, 2, 0),
  new Waypoint(0.0, 18.905, Math.toRadians(33.102), 1.219, 1, 0),
  new Waypoint(2.973, 24.63, Math.toRadians(85.673), 2.359, 2.133, 0),
  new Waypoint(0.444, 24.985, Math.toRadians(279.086), 2.247, 2.291, 12),
  new Waypoint(1.864, 20.059, Math.toRadians(278.915), 1.833, 14.105, 12),
  new Waypoint(-1.154, -1.9, Math.toRadians(270.54))
};
  DriveSubsystem m_driveSubsystem;

  public BarrelPath(DriveSubsystem driveSubsystem) {
    // Add your commands in the super() call, e.g.
    // super(new FooCommand(), new BarCommand());super();
    m_driveSubsystem = driveSubsystem;
    addCommands(new SequentialCommandGroup(new CreatePathCommand(driveSubsystem, k_path, PathConfigs.barrel)));
  }

  @Override
  public void initialize() {
    super.initialize();
    m_driveSubsystem.setPos(0, 3.5);
    m_driveSubsystem.resetAngle(90);
  }
}
// beat 13.24 seconds